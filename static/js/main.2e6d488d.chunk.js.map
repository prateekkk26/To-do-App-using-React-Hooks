{"version":3,"sources":["Components/ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","items","deleteItems","setUpdate","listItems","map","item","className","key","type","value","text","onChange","e","target","icon","onClick","duration","easing","library","add","faTrash","App","useState","setItems","currentItem","setCurrentItem","id","onSubmit","preventDefault","newItem","newItems","placeholder","Date","now","filterItem","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SA0BeA,MArBf,YAAoD,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,UACjCC,EAAYH,EAAMI,KAAI,SAAAC,GAC3B,OAEC,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC/B,2BACC,2BAAOC,KAAK,OAAOC,MAAOJ,EAAKK,KAAMC,SAAU,SAACC,GAAD,OAAOV,EAAUU,EAAEC,OAAOJ,MAAOJ,EAAKE,QACrF,8BACC,kBAAC,IAAD,CAAiBD,UAAU,UAAUQ,KAAK,QAAQC,QAAS,kBAAMd,EAAYI,EAAKE,cAMvF,OACC,kBAAC,IAAD,CAAUS,SAAU,IAAKC,OAAO,eAC9Bd,I,eCdJe,IAAQC,IAAIC,KA0DGC,MAxDf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENtB,EAFM,KAECuB,EAFD,OAGyBD,mBAAS,CAACZ,KAAM,GAAIH,IAAK,KAHlD,mBAGNiB,EAHM,KAGOC,EAHP,KAyCb,OAEE,yBAAKnB,UAAU,iBACb,gCACE,0BAAMoB,GAAG,OAAOC,SAjCtB,SAAiBf,GACfA,EAAEgB,iBACF,IAAMC,EAAUL,EAChB,GAAmB,KAAhBK,EAAQnB,KAAW,CACpB,IAAMoB,EAAQ,sBAAO9B,GAAP,CAAc6B,IAC5BN,EAASO,GACTL,EAAe,CACbf,KAAM,GACNH,IAAK,QA0BH,2BAAOC,KAAK,OAAOC,MAAOe,EAAYd,KAAMqB,YAAY,iBAAiBpB,SAzCjF,SAAsBC,GACpBa,EAAe,CACbf,KAAME,EAAEC,OAAOJ,MACfF,IAAKyB,KAAKC,WAuCN,4BAAQ3B,UAAU,iBAAgBE,KAAK,UAAvC,SAGJ,kBAAC,EAAD,CAAWR,MAAOA,EAAOC,YAzBT,SAACM,GACnB,IAAM2B,EAAalC,EAAMmC,QAAO,SAAA9B,GAAI,OAClCA,EAAKE,MAAMA,KACXgB,EAASW,IAsB0ChC,UAnBvD,SAAmBQ,EAAMH,GACvB,IAAIuB,EAAW9B,EACf8B,EAAS1B,KAAI,SAAAC,GACRA,EAAKE,MAAQA,IACdF,EAAKK,KAAOA,MAGhBa,EAAS,YAAIO,OAaX,+BChDcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2e6d488d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ListItems.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move'\r\n\r\nfunction ListItems({items, deleteItems, setUpdate}){\r\n\tconst listItems = items.map(item => {\r\n\t\treturn(\r\n\r\n\t\t\t<div className=\"list\" key={item.key}>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<input type=\"text\" value={item.text} onChange={(e) => setUpdate(e.target.value, item.key)} />\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<FontAwesomeIcon className=\"faicons\" icon=\"trash\" onClick={() => deleteItems(item.key)} />\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\t\r\n\t\t)\r\n\t})\r\n\treturn(\r\n\t\t<FlipMove duration={300} easing=\"ease-in-out\">\r\n\t\t\t{listItems}\r\n\t\t</FlipMove>\r\n\t);\r\n}\r\n\r\nexport default ListItems","import React, {useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport ListItems from './Components/ListItems'\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash);\n\nfunction App() {\n\n  const [items, setItems] = useState([])\n  const [currentItem, setCurrentItem] = useState({text: '', key: ''})\n\n  function handleChange(e){\n    setCurrentItem({\n      text: e.target.value,\n      key: Date.now()\n    })\n  }\n\n  function addItem(e){\n    e.preventDefault();\n    const newItem = currentItem;\n    if(newItem.text !==\"\"){\n      const newItems = [...items, newItem];\n      setItems(newItems);\n      setCurrentItem({\n        text: '',\n        key: ''\n      })\n    }\n  }\n\n  const deleteItems = (key) => {\n    const filterItem = items.filter(item =>\n      item.key!==key);\n      setItems(filterItem)\n    }\n\n  function setUpdate(text, key){\n    let newItems = items;\n    newItems.map(item => {\n      if(item.key === key){\n        item.text = text;\n      }\n    });\n    setItems([...newItems]);\n  }\n\n  return(\n\n    <div className=\"App container\">\n      <header>\n        <form id=\"form\" onSubmit={addItem}>\n          <input type=\"text\" value={currentItem.text} placeholder=\"Enter the item\" onChange={handleChange} />\n          <button className=\"btn btn-danger\"type=\"submit\">ADD</button>\n        </form>\n      </header>\n      <ListItems items={items} deleteItems={deleteItems} setUpdate={setUpdate} />\n      <br/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}